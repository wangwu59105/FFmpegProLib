package com.victor.ffmpeg;import android.Manifest;import android.app.AlertDialog;import android.content.DialogInterface;import android.os.Bundle;import androidx.annotation.NonNull;import androidx.appcompat.app.AppCompatActivity;import java.util.Observable;import java.util.Observer;import permission.victor.com.library.OnPermissionCallback;import permission.victor.com.library.PermissionHelper;/** * Created by victor on 2016/2/2. */public abstract class BaseActivity extends AppCompatActivity implements Observer,        OnPermissionCallback {    protected String TAG = getName();    private PermissionHelper permissionHelper;    private String[] neededPermission;    public final static String[] MULTI_PERMISSIONS = new String[]{            Manifest.permission.CAMERA,            Manifest.permission.VIBRATE,            Manifest.permission.READ_EXTERNAL_STORAGE,            Manifest.permission.READ_PHONE_STATE,            Manifest.permission.MOUNT_UNMOUNT_FILESYSTEMS,            Manifest.permission.GET_TASKS    };    private AlertDialog builder;    protected String getName() {        return getClass().getSimpleName();    }    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(getLayoutResource());        initialize();    }    private void initialize () {        //已在values-21中的styles.xml中设置虚拟按键背景为透明则不需要重新计算view留出虚拟按键显示区域//        AndroidBug54971Workaround.assistActivity(findViewById(android.R.id.content));        permissionHelper = PermissionHelper.getInstance(this);        requestPermission(MULTI_PERMISSIONS);    }    @Override    protected void onResume() {        super.onResume();    }    @Override    protected void onDestroy() {        super.onDestroy();    }    protected abstract int getLayoutResource();    @Override    public void update(Observable observable, Object data) {    }    public void requestPermission (String[] permissions) {        permissionHelper                .setForceAccepting(false) // default is false. its here so you know that it exists.                .request(permissions);    }    @Override    public void onPermissionGranted(@NonNull String[] strings) {    }    @Override    public void onPermissionDeclined(@NonNull String[] strings) {    }    @Override    public void onPermissionPreGranted(@NonNull String s) {    }    @Override    public void onPermissionNeedExplanation(@NonNull String s) {        neededPermission = PermissionHelper.declinedPermissions(this, MULTI_PERMISSIONS);        StringBuilder builder = new StringBuilder(neededPermission.length);        if (neededPermission.length > 0) {            for (String permission : neededPermission) {                builder.append(permission).append("\n");            }        }        AlertDialog alert = getAlertDialog(neededPermission, builder.toString());        if (!alert.isShowing()) {            alert.show();        }    }    @Override    public void onPermissionReallyDeclined(@NonNull String s) {    }    @Override    public void onNoPermissionNeeded() {    }    public AlertDialog getAlertDialog(final String[] permissions, final String permissionName) {        if (builder == null) {            builder = new AlertDialog.Builder(this)                    .setTitle("Permission Needs Explanation")                    .create();        }        builder.setButton(DialogInterface.BUTTON_POSITIVE, "Request", new DialogInterface.OnClickListener() {            @Override            public void onClick(DialogInterface dialog, int which) {                permissionHelper.requestAfterExplanation(permissions);            }        });        builder.setMessage("Permissions need explanation (" + permissionName + ")");        return builder;    }}